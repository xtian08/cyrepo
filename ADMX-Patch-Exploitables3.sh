#!/bin/bash
#Created by Chris Mariano

echo "*************Start of Script*************"

#Clean tmp dmg files
sudo /bin/rm /tmp/*.dmg

function detach_dmg()
{
volumes=("/Volumes/Google Chrome/" "/Volumes/Google Chrome 1/" "/Volumes/Google Chrome 2/" "/Volumes/Thunderbird/" "/Volumes/Thunderbird 1/" "/Volumes/Thunderbird 2/" "/Volumes/Firefox/" "/Volumes/Firefox 1/" "/Volumes/Firefox 2/")

for volume in "${volumes[@]}"; do
    hdiutil detach "$volume" > /dev/null 2>&1
done
}

####################
# Chrome CODE

# Get version installed
echo "*************Checking Chrome*************"
installed_version="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version   | grep -iE "[0-9.]{10,20}" | tr -d " <>-:;/,&\"=#[a-z][A-Z]")"
echo "GC Installed Ver: $installed_version"

DOWNLOAD_URL="https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg"
destination="/tmp/googlechrome.dmg"
detach_dmg
curl -o "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
chrome_latest_stable=$(defaults read "$temp_mount/Google Chrome.app/Contents/Info.plist" CFBundleShortVersionString) > /dev/null 2>&1
echo "GC Stable Ver: $chrome_latest_stable"
hdiutil detach "$temp_mount" > /dev/null 2>&1

install_ChromeDmg() {

  tmp_mount=`/usr/bin/mktemp -d /tmp/chrome.XXXX`
  hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

  rm -fR "/Applications/Google Chrome.app"

  ditto "${tmp_mount}/Google Chrome.app" "/Applications/Google Chrome.app"

  sleep 1

  hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
  detach_dmg && /bin/rm /tmp/googlechrome.dmg

  if [ -e "/Applications/Google Chrome.app" ]; then
    echo "****** Latest version of Chrome is now installed on target Mac.******"
  fi
}

install_ChromePkg() {

mkdir /tmp/chrome
cd /tmp/chrome

curl -L -o chrome.pkg https://dl.google.com/chrome/mac/stable/accept_tos%3Dhttps%253A%252F%252Fwww.google.com%252Fintl%252Fen_ph%252Fchrome%252Fterms%252F%26_and_accept_tos%3Dhttps%253A%252F%252Fpolicies.google.com%252Fterms/googlechrome.pkg

sudo -S installer -allowUntrusted -pkg "/tmp/chrome/chrome.pkg" -target /;

#Remove Temp Files
sudo rm chrome.pkg
sudo rm -rf /tmp/chrome/
detach_dmg && /bin/rm /tmp/googlechrome.dmg

  if [ -e "/Applications/Google Chrome.app" ]; then
    echo "****** Latest version of Chrome is now installed on target Mac.******"
  fi
}


check_Running ()
{
# To find if the app is running, use:
ps -A | grep "Google Chrome.app" | grep -v "grep" > /tmp/RunningApps.txt

if grep -q "Google Chrome.app" /tmp/RunningApps.txt;
then
    echo "****** Application is currently running on target Mac. Proceeding Upgrade.******"
    install_ChromePkg
else
    echo "****** Application is not running on target Mac. Proceeding Clean Install...******"
    install_ChromeDmg
fi
}

# If the version installed differs at all from the available version
# then we want to update
case "${installed_version}" in
  "${chrome_latest_stable}")
    echo "GC Installed Ver: $installed_version"
    echo "****** Chrome version checked OK (${chrome_latest_stable}) ******"
    detach_dmg && /bin/rm /tmp/googlechrome.dmg
    ;;
  *) 
    echo "GC Installed Ver: $installed_version"
    echo "****** Chrome version differs - installed: ${installed_version}, available: ${chrome_latest_stable} ******"
    check_Running
    ;;
esac

####################
# Firefox CODE

echo "*************Checking Firefox*************"
# Download
DOWNLOAD_URL="https://download.mozilla.org/?product=firefox-latest&os=osx&lang=en-US"
destination="/tmp/firefox.dmg"
detach_dmg
wget -O "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
stableFF=$(defaults read "$temp_mount/Firefox.app/Contents/Info.plist" CFBundleShortVersionString)
echo "FF Stable Ver: $stableFF"
FFinstalled_version=$(defaults read "/Applications/Firefox.app/Contents/Info.plist" CFBundleShortVersionString 2>/dev/null)
echo "FF Installed Ver: $FFinstalled_version"
hdiutil detach "$temp_mount" >/dev/null 2>&1

install_FirefoxDmg() {

  tmp_mount=`/usr/bin/mktemp -d /tmp/firefox.XXXX`
  hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

  sudo rm -fR "/Applications/Firefox.app"

  sudo ditto "${tmp_mount}/Firefox.app" "/Applications/Firefox.app"

  sleep 1

  hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
  detach_dmg && /bin/rm /tmp/firefox.dmg

  if [ -e "/Applications/Firefox.app" ]; then
    echo "****** Latest version of Firefox is installed on target Mac.******"
  fi
}

install_FirefoxPkg() {

curl -o /tmp/firefox.pkg https://download-installer.cdn.mozilla.net/pub/firefox/releases/$stableFF/mac/en-US/Firefox%20$stableFF.pkg

sudo -S installer -allowUntrusted -pkg "/tmp/firefox.pkg" -target /;

#Remove Temp Files
sudo rm firefox.pkg
detach_dmg

  if [ -e "/Applications/Firefox.app" ]; then
    echo "****** Latest version of Firefox is installed on target Mac.******"
  fi
}

check_RunningFF ()
{
# To find if the app is running, use:
ps -A | grep "Firefox.app" | grep -v "grep" > /tmp/RunningAppsFF.txt

if grep -q "Firefox.app" /tmp/RunningAppsFF.txt;
then
    echo "****** Firefox is currently running on target Mac. Proceeding Upgrade.******"
    install_FirefoxPkg
else
    echo "****** Firefox is not running on target Mac. Proceeding Clean Install...******"
    install_FirefoxDmg
fi
}

# If the version installed differs at all from the available version
# then we want to update
case "${FFinstalled_version}" in
  "${stableFF}")
    echo "****** Firefox version checked OK (${stableFF}) ******"
    detach_dmg && /bin/rm /tmp/firefox.dmg
    ;;
  *) 
    if [ ! -d "/Applications/Firefox.app" ]; then
        echo "Firefox is not installed. Exiting."
    else
    echo "****** Firefox version differs - installed: ${FFinstalled_version}, available: ${stableFF} ******"
    check_RunningFF
    fi
    ;;
esac


####################
# Thunderbird CODE

# Check if Thunderbird is installed

echo "*************Checking Thunderbird*************"
# Download
DOWNLOAD_URL="https://download.mozilla.org/?product=thunderbird-latest&os=osx&lang=en-US"
destination="/tmp/thunderbird.dmg"
detach_dmg
wget -O "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
stableTB=$(defaults read "$temp_mount/Thunderbird.app/Contents/Info.plist" CFBundleShortVersionString)
echo "TB Stable Ver: $stableTB"
TBinstalled_version=$(defaults read "/Applications/Thunderbird.app/Contents/Info.plist" CFBundleShortVersionString 2>/dev/null)
echo "TB Installed Ver: $TBinstalled_version"
hdiutil detach "$temp_mount" >/dev/null 2>&1

install_ThunderbirdDmg() {

  tmp_mount=`/usr/bin/mktemp -d /tmp/Thunderbird.XXXX`
  hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

  sudo rm -fR "/Applications/Thunderbird.app"

  sudo ditto "${tmp_mount}/Thunderbird.app" "/Applications/Thunderbird.app"

  sleep 1

  hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
  detach_dmg && /bin/rm /tmp/Thunderbird.dmg

  if [ -e "/Applications/Thunderbird.app" ]; then
    echo "****** Latest version of Thunderbird is now installed on target Mac.******"
  fi
}

install_ThunderbirdPkg() {

curl -o /tmp/thunderbird.pkg https://download-installer.cdn.mozilla.net/pub/thunderbird/releases/$stableTB/mac/en-US/Thunderbird%20$stableTB.pkg

sudo -S installer -allowUntrusted -pkg "/tmp/thunderbird.pkg" -target /;

#Remove Temp Files
sudo rm /tmp/thunderbird.pkg
detach_dmg

  if [ -e "/Applications/Thunderbird.app" ]; then
    echo "****** Latest version of Thunderbird is now installed on target Mac.******"
  fi
}

check_RunningTB ()
{
# To find if the app is running, use:
ps -A | grep "Thunderbird.app" | grep -v "grep" > /tmp/RunningAppsTB.txt

if grep -q "Thunderbird.app" /tmp/RunningAppsTB.txt;
then
    echo "****** Thunderbird is currently running on target Mac. Proceeding Upgrade.******"
    install_ThunderbirdPkg
else
    echo "****** Thunderbird is not running on target Mac. Proceeding Clean Install...******"
    install_ThunderbirdDmg
fi
}

# If the version installed differs at all from the available version
# then we want to update
case "${TBinstalled_version}" in
  "${stableTB}")
    echo "****** Thunderbird version checked OK (${stableTB}) ******"
    detach_dmg && /bin/rm /tmp/thunderbird.dmg
    ;;
  *) 
    if [ ! -d "/Applications/Thunderbird.app" ]; then
        echo "Thunderbird is not installed. Exiting."
    else
    echo "****** Thunderbird version differs - installed: ${TBinstalled_version}, available: ${stableTB} ******"
    check_RunningTB
    fi
    ;;
esac

####################
# Adobe Reader CODE

echo "*************Checking Acrobat Reader*************"

AR_install() {
    ARCurrVersNormalized=$(echo "$latestver" | sed -e 's/[.]//g')
    echo "ARCurrVersNormalized: $ARCurrVersNormalized"
    urldl="https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/${ARCurrVersNormalized}/AcroRdrDC_${ARCurrVersNormalized}_MUI.dmg"

    #Build URL	
    url="$urldl"
    echo "Latest version of the URL is: $url"

    # Download newer version
    if [ -f "/Users/Shared/acroreader$ARCurrVersNormalized.dmg" ]; then
        echo "$(date): Downloaded file is already in place."
    else 
        echo "$(date): Downloading newer version."
        rm -f /Users/Shared/acroreader*
        /usr/bin/curl -s -o /Users/Shared/acroreader$ARCurrVersNormalized.dmg "$url"
    fi

    # Mount installer disk image
    echo "$(date): Mounting installer disk image."
    /usr/bin/hdiutil attach /Users/Shared/acroreader$ARCurrVersNormalized.dmg -nobrowse -quiet 

    # Installing
    echo "$(date): Installing..."
        # Check if any process with name containing "Acrobat" is running
        if pgrep -f "Acrobat" > /dev/null; then
            # If found, kill the process
            pkill -f "Acrobat"
            echo "Process containing 'Acrobat' in its name has been killed."
        else
            # If not found, display a message
            echo "No process containing 'Acrobat' in its name is currently running."
        fi
    sudo /usr/sbin/installer -pkg "/Volumes/AcroRdrDC_${ARCurrVersNormalized}_MUI/AcroRdrDC_${ARCurrVersNormalized}_MUI.pkg" -target / > /dev/null
   
    sleep 10

    # Unmount installer disk image
    echo "$(date): Unmounting installer disk image."
    /usr/bin/hdiutil detach "$(df | grep -o '/Volumes/AcroRdr.*' | head -n 1)" -quiet -verbose >/dev/null 2>&1
    mounted_volumes=$(df -h | grep AcroRdr${ARCurrVersNormalized} | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."
    sleep 10

    # Deleting disk image
    echo "$(date): Deleting disk image."

    # Double check if the new version got updated
    newlyinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)

    if [ "$latestvernorm" = "$newlyinstalledver" ]; then
        echo "$(date): SUCCESS: Adobe Reader has been updated to version $newlyinstalledver"
    else
        echo "$(date): ERROR: Adobe Reader update unsuccessful, version remains at $currentinstalledver."
        echo "--"	
    fi
}

AR_check_ver() {
    # Get the latest version of Reader available from Adobe's About Reader page.
    latestver=$(curl -s -L https://armmf.adobe.com/arm-manifests/mac/AcrobatDC/reader/current_version.txt)
    echo "AR Stable Ver: $latestver"
    latestvernorm=$(echo "$latestver")

    # Get the version number of the currently-installed Adobe Reader, if any.
    if [ -e "/Applications/Adobe Acrobat Reader DC.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader DC.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat Reader.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    else
        currentinstalledver="0.0"
    fi

    echo "AR Installed Ver: $currentinstalledver"

    if [ "$latestvernorm" = "$currentinstalledver" ]; then
        echo "****** Adobe Reader is up to date. Exiting ******"
    else
        echo "****** Adobe Reader is outdated. Updating ******"
        AR_install
    fi
}

# Check if either Adobe Acrobat Reader or Adobe Acrobat Reader DC is installed
if [ ! -e "/Applications/Adobe Acrobat Reader.app" ] && [ ! -e "/Applications/Adobe Acrobat Reader DC.app" ]; then
    echo "****** Adobe Acrobat Reader is not installed. Exiting ******"
else
    echo "****** Adobe Acrobat Reader is installed. Proceeding ******"
    AR_check_ver
fi

echo "****** Adobe Acrobat Reader check completed ******"


####################
# log4j CODE

echo "*************Checking log4j*************"

# Check if log4j is installed
# Define variables
jar_file="/Users/Shared/log4jscan-latest.jar"
log_file="/Users/Shared/log4j.log"

# Function to check if JAR file exists
check_jar_existence() {
    if [ -f "$jar_file" ]; then
        echo "JAR file already exists. Skipping download."
        return 0
    else
        return 1
    fi
}

# Check if log4j JAR file exists
if check_jar_existence; then
    echo "Using existing JAR file: $jar_file"
else
    
    # Get the latest release URL
    latest_url=$(curl -s https://api.github.com/repos/logpresso/CVE-2021-44228-Scanner/releases/latest | grep "browser_download_url.*\.jar" | cut -d '"' -f 4)
    
    # Download the latest .jar file to /Users/Shared directory
    wget -q -O "$jar_file" "$latest_url"
    
    # Check if download was successful
    if [ $? -eq 0 ]; then
        echo "Downloaded: $jar_file"
    else
        echo "Failed to download JAR file. Exiting."
    fi
fi

# Run the scanner
sudo java -jar "$jar_file" --scan-log4j1 --no-empty-report --force-fix / > "$log_file" 2>/dev/null
echo "****** Scan completed. Log file: $log_file ******"



####################
# Adobe CODE


echo "*************Checking Acrobat Full Version*************"

AB_install() {
    ABCurrVersNormalized=$( echo $latestver | sed -e 's/[.]//g' )
    echo "ABCurrVersNormalized: $ABCurrVersNormalized"
    urldl="https://ardownload2.adobe.com/pub/adobe/acrobat/mac/AcrobatDC/${ABCurrVersNormalized}/AcrobatDCUpd${ABCurrVersNormalized}.dmg"

    #Build URL	
    url="$urldl"
    echo "Latest version of the URL is: $url"

    # Download newer version
    if [ -f "/Users/Shared/acrobatupd$ABCurrVersNormalized.dmg" ]; then
        echo "$(date): Downloaded file is already in place."
    else 
        echo "$(date): Downloading newer version."
        rm -f /Users/Shared/acrobatupd*
        /usr/bin/curl -s -o /Users/Shared/acrobatupd$ABCurrVersNormalized.dmg "$url"
    fi

    # Mount installer disk image
    echo "$(date): Mounting installer disk image."
    /usr/bin/hdiutil attach /Users/Shared/acrobatupd$ABCurrVersNormalized.dmg -nobrowse -quiet 

    # Installing
    echo "$(date): Installing..."
        # Check if any process with name containing "Acrobat" is running
        if pgrep -f "Acrobat" > /dev/null; then
            # If found, kill the process
            pkill -f "Acrobat"
            echo "Process containing 'Acrobat' in its name has been killed."
        else
            # If not found, display a message
            echo "No process containing 'Acrobat' in its name is currently running."
        fi
    sudo /usr/sbin/installer -pkg /Volumes/AcrobatDCUpd${ABCurrVersNormalized}/AcrobatDCUpd${ABCurrVersNormalized}.pkg -target / #> /dev/null
   
    sleep 10

    # Unmount installer disk image
    echo "$(date): Unmounting installer disk image."
    /usr/bin/hdiutil detach "$(df | grep -o '/Volumes/AcrobatDCUpd${ABCurrVersNormalized}' | head -n 1)" -quiet -verbose >/dev/null 2>&1
    /usr/bin/hdiutil detach $(/bin/df | /usr/bin/grep 'AcrobatDCUpd${ABCurrVersNormalized}' | awk '{print $1}') -quiet -verbose >/dev/null 2>&1
    #mounted_volumes=$(df -h | grep '^/dev/' | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."
    mounted_volumes=$(df -h | grep AcrobatDCUpd${ABCurrVersNormalized} | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."

    sleep 10

    # Deleting disk image
    echo "$(date): Deleting disk image."

    # Double check if the new version got updated
    newlyinstalledver_01=$(/usr/bin/defaults read "/Applications/Adobe Acrobat.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    newlyinstalledver_02=$(/usr/bin/defaults read "/Applications/Adobe Acrobat DC.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    newlyinstalledver_03=$(/usr/bin/defaults read "/Applications/Adobe Acrobat DC/Adobe Acrobat.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)

    if [ "$latestvernorm" = "$newlyinstalledver_01" ] || [ "$latestvernorm" = "$newlyinstalledver_02" ] || [ "$latestvernorm" = "$newlyinstalledver_03" ]; then
        echo "$(date): SUCCESS: Adobe Full has been updated to version $latestvernorm"
    else
        echo "$(date): ERROR: Adobe Full update unsuccessful, version remains at $currentinstalledver."
        echo "--"	
    fi
}

AB_check_ver() {
    # Get the latest version of AB  available from Adobe's About AB  page.
    latestver=$(curl -s -L https://armmf.adobe.com/arm-manifests/mac/AcrobatDC/acrobat/current_version.txt)
    echo "AB Stable Ver: $latestver"
    latestvernorm=$(echo "$latestver")

    # Get the version number of the currently-installed Adobe Full, if any.
    if [ -e "/Applications/Adobe Acrobat DC.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat\ DC.app/Contents/Info CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat.app/Contents/Info CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat DC/Adobe Acrobat.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat\ DC/Adobe\ Acrobat.app/Contents/Info CFBundleShortVersionString 2>/dev/null)   
    else
        currentinstalledver="0.0"
    fi

    echo "AB Installed Ver: $currentinstalledver"

    if [ "$latestvernorm" = "$currentinstalledver" ]; then
        echo "****** Adobe Full is up to date. Exiting ******"
    else
        echo "****** Adobe Full is outdated. Updating ******"
        AB_install
    fi
}

# Check if either Adobe Acrobat AB  or Adobe Acrobat AB  DC is installed
if [ ! -e "/Applications/Adobe Acrobat.app" ] && [ ! -e "/Applications/Adobe Acrobat DC.app" ] && [ ! -e "/Applications/Adobe Acrobat DC/Adobe Acrobat.app" ]; then
    echo "****** Adobe Acrobat Full is not installed. Exiting ******"
else
    echo "****** Adobe Acrobat Full is installed. Proceeding ******"
    AB_check_ver
fi

echo "****** Adobe Acrobat Full check completed ******"


####################
# SU CODE

echo "*************Checking MacOS SU*************"
echo "Performing Software Update Check for macOS"
#safariSU=$(softwareupdate -lri)
#echo "$safariSU"
echo "****** macOS SU check completed ******"

####################
# MSO CODE

# Function to install Microsoft AutoUpdate
install_MAU() {
    echo "Installing Microsoft AutoUpdate..."
    curl -L -o "/tmp/office/mau2.pkg" "https://go.microsoft.com/fwlink/?linkid=830196"
    sudo installer -allowUntrusted -verboseR -pkg "/tmp/office/mau2.pkg" -target /
}

# Main script starts here
echo "*************Checking Microsoft Office*************"

# Check if Microsoft AutoUpdate app exists
if [ -e "/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app" ]; then
    echo "Microsoft AutoUpdate is installed."
else
    echo "Microsoft AutoUpdate is not installed. Installing..."
    mkdir -p "/tmp/office"
    install_MAU || { echo "Error: Failed to install Microsoft AutoUpdate.";}
fi

# Open Microsoft AutoUpdate app in background
echo "Opening Microsoft AutoUpdate app..."
#open "/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app" &

# Continue script without waiting for the app to terminate
echo "Continuing script execution..."

# Run terminal command to install updates in background
echo "Installing updates..."
sudo /Library/Application\ Support/Microsoft/MAU2.0/Microsoft\ AutoUpdate.app/Contents/MacOS/msupdate --install --terminate 7200 > /dev/null 2>&1 &

echo "*************Check complete for Microsoft Office*************"

####################
# Silverlight CODE

# Check if Silverlight is installed

echo "*************Checking Silverlight*************"

# Remove WPFe
sudo -S rm -rf /Library/Internet\ Plug-Ins/WPFe.plugin/
sudo -S rm -rf /Library/Internet\ Plug-Ins/Silverlight.plugin/

sudo -S rm -rf /Library/Receipts/Silverlight.pkg/
sudo -S rm -rf /Library/Receipts/Silverlight_W2.pkg/
sudo -S rm -rf /Library/Receipts/Silverlight_W2_MIX.pkg/
echo ""
echo "*************Check complete for Silverlight*************"

####################
# Java CODE

# Check if Java is installed

echo "*************Checking Java*************"

# Variables
#log_name="ZuluJDK"
cask_json="zulu.json"
destination="/Users/Shared/"

# Function to log messages
#log() {
#    echo "$(date +'%Y-%m-%d %H:%M:%S') $1" >> "$log_file"
#}

# Function to generate URL
generate_url() {
    latest_json=$(curl -s "https://formulae.brew.sh/api/cask/$cask_json")
    latest_stable=$(echo "$latest_json" | grep -o '"version":"[^"]*"' | awk -F'"' '{print $4}')
    version1=$(echo "$latest_stable" | awk -F ',' '{print $1}')
    version2=$(echo "$latest_stable" | awk -F ',' '{print $2}')
    version3=$(echo $version1 | awk -F '.' '{print $1}')
    url="https://cdn.azul.com/zulu/bin/zulu${version2}-ca-jdk${version1}-macosx_"
}

# Function to download file
download_file() {
    cleaned_url="$1"
    filename=$(basename "$cleaned_url")
    echo "Filename: $filename"
    if [ -f "$destination/$filename" ]; then
        echo "$(date): $filename already downloaded."
    else
        rm -f /Users/Shared/zulu*
        echo "$(date): Downloading $filename..."
        curl -o "$destination/$filename" "$cleaned_url" || { echo "Error: Failed to download $filename";}
    fi
}

# Function to determine architecture and download appropriate file
download_dmg() {
    arch=$(uname -m)
    case "$arch" in
        arm|aarch64|arm64)
            echo "ARM architecture. Downloading arm64 binaries..."
            cleaned_url="$url"aarch64.dmg ;;
        x86_64|i686|i386)
            echo "Intel architecture. Downloading x64 binaries..."
            cleaned_url="$url"x64.dmg ;;
        *)
            echo "Unknown architecture: $arch"

    esac
    dmg_file="$destination$(basename "$cleaned_url")"
    download_file "$cleaned_url"

}

# Function to remove JRE
remove_jre() {
    local jre_path
    jre_path="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin"

    echo "$(date): Clean up JRE traces..."
    sudo rm -rf "$jre_path"
    sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane
    sudo rm -fr ~/Library/Application\ Support/Oracle/Java
    sudo rm -rf /Library/Java/JavaVirtualMachines
    sudo mkdir /Library/Java/JavaVirtualMachines

}

# Function to mount DMG file, install PKG, and unmount DMG
mount_and_install_pkg() {
    echo "$(date): Updating Java..."
    local dmg_file="$1"
    local mounted_dir="/Volumes/ZuluInstaller"
    local pkg_file
    dmg_file="$1"
    echo "Mounting $dmg_file"
    hdiutil attach "$dmg_file" -mountpoint "$mounted_dir"
    remove_jre
    pkg_file=$(sudo find "$mounted_dir" -name "*.pkg" -maxdepth 1 -mindepth 1 -exec echo {} \;)
    echo "Installing $pkg_file ****************"
    sudo installer -pkg "$pkg_file" -target "/"
    hdiutil detach "$mounted_dir"
}


# Function to Check Java version
check_java_version() {
    generate_url
    java_version=$(java -version 2>&1 | tr '[:upper:]' '[:lower:]')
    comparison_strings=("unable" "error")
    match_found=false

    for comparison_string in "${comparison_strings[@]}"; do
        if [[ $java_version == *"$comparison_string"* ]]; then
            echo "Java encountered an issue: $comparison_string"
            echo "Java is not installed or not working"
            remove_jre
            match_found=true
        fi
    done

    if ! $match_found; then
        # Check if the version string exists in $java_version
        if [[ $java_version == *"\"$version1\""* ]]; then
            echo "Skipping JDK update as version $version1 is found in Java version."
        else
            echo "Java is installed and working"
            echo "Performing JDK update..."
            generate_url
            download_dmg
            mount_and_install_pkg "$dmg_file"
        fi
    fi
}


if [[ $(find /Library/Java/JavaVirtualMachines/ -type d -iname "*jdk*" 2>/dev/null) ]]; then
    echo "Folder with 'jdk' found."
    echo "Checking Java version"
    check_java_version
else
    echo "No folder with 'jdk' found."
    echo "Removing JRE"
    remove_jre
fi

# Function to search rougue Java files and rename them
process_files() {
    local file_names=("$@")
    local files_found=0

    for file in "${file_names[@]}"; do
        echo "Searching for $file..."
        results=$(sudo mdfind "kMDItemFSName == '$file'" | grep -v "^/Library/Java/JavaVirtualMachines/")
        
        if [ -n "$results" ]; then
            files_found=1
            while IFS= read -r filepath; do
                if [[ "$file" == *.jar ]]; then
                    newpath="${filepath%.jar}.ogjarbak"
                    echo "Renaming $filepath to $newpath"
                    sudo mv "$filepath" "$newpath"
                else
                    echo "Found $filepath (already .ogjarbak)"
                fi
            done <<< "$results"
        fi
    done

    return $files_found
}

# Define file lists
jar_files=("rt.jar" "jrt-fs.jar" "catalina.jar" "struts-core-1.3.8.jar")
ogjarbak_files=("rt.ogjarbak" "jrt-fs.ogjarbak")

# Initialize flag
java_required=0

# Process .jar files
process_files "${jar_files[@]}"
if [ $? -eq 1 ]; then
    java_required=1
fi

# Process .ogjarbak files
process_files "${ogjarbak_files[@]}"
if [ $? -eq 1 ]; then
    java_required=1
fi

force_install_jdk()
{
#Check if JDK is installed
if [[ $(find /Library/Java/JavaVirtualMachines/ -type d -iname "*jdk*" 2>/dev/null) ]]; then
    echo "Folder with 'jdk' found."
    echo "Checking Java version"
    check_java_version
else
    generate_url
    download_dmg
    mount_and_install_pkg "$dmg_file"
fi
}

# Check if Java is required
if [ $java_required -eq 1 ]; then
    echo "Java is required. Install Zulu JDK"
    force_install_jdk
fi

echo "*************Check complete for Java*************"

####################
# Safari CODE

# Check if Safari is installed

echo "*************Checking Safari*************"

# Function to compare version numbers
version_compare() {
    if [[ "$1" == "$2" ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# Function to download and install the package
download_and_install_pkg() {
    local url=$1
    local pkg_name=$(basename $url)
    
    echo "Downloading $pkg_name..."
    if ! curl -O $url; then
        echo "Failed to download $pkg_name. URL may be dead or unreachable."
        return 1
    fi

    echo "Installing $pkg_name..."
    if ! sudo installer -pkg $pkg_name -target /; then
        echo "Failed to install $pkg_name."
        rm -f $pkg_name
        return 1
    fi

    echo "Cleaning up..."
    rm -f $pkg_name
    return 0
}

# Function to handle the main logic
handle_safari_installation() {
    # Get the current macOS version
    local macos_version=$(sw_vers -productVersion)

    # Define the version boundaries
    local min_version="11.0"
    local max_version="13.0"

    # Check if the current version is within the specified range
    version_compare $macos_version $min_version
    if [[ $? -eq 2 ]]; then
        echo "macOS version is below $min_version. Skipping installation."
        return
    fi

    version_compare $macos_version $max_version
    if [[ $? -eq 1 ]]; then
        echo "macOS version is above $max_version. Skipping installation."
        return
    fi

    # Determine the URL based on the macOS version
    local pkg_url=""
    if [[ $macos_version =~ ^11 ]]; then
        pkg_url="http://swcdn.apple.com/content/downloads/47/04/042-27539-A_JOWCKWG03T/q1askvrrids8ykmi9ok73aqmj05kzskcya/Safari16.6.1BigSurAuto.pkg"
    elif [[ $macos_version =~ ^12 ]]; then
        pkg_url="https://swcdn.apple.com/content/downloads/62/35/052-09275-A_9GJLP5ERYO/bn3yyowf9ulxzdfmu7ia1ihnh7at3rw2s1/Safari17.5MontereyAuto.pkg"
    elif [[ $macos_version =~ ^13 ]]; then
        pkg_url="https://swcdn.apple.com/content/downloads/20/22/052-69114-A_HXAGLW506N/2eosf2mygag5y38grze3znqgmnss0bbpdd/Safari17.5VenturaAuto.pkg"
    else
        echo "macOS version not supported. Skipping installation."
        return
    fi

    # Download and install the package
    download_and_install_pkg $pkg_url
}

# Main script execution
handle_safari_installation

echo "*************Check complete for Safari for macOS 11-13 only *************"

####################
# Rogue APPS CODE

echo "*************Checking Rogue Apps*************"

# Define the names of the apps
APPS=("Google Chrome.app" "Safari.app" "Firefox.app" "Thunderbird.app" "Foxit Reader.app")

# Function to find and delete app using mdfind
delete_app() {
    local APP_NAME=$1
    echo "Searching for $APP_NAME..."
    local RESULTS=$(mdfind "kMDItemFSName == '$APP_NAME' && ! kMDItemPath == '/Applications/*'")
    if [ -z "$RESULTS" ]; then
        echo "No instances of $APP_NAME found outside /Applications."
    else
        echo "$RESULTS" | while read -r LINE; do
            if [[ "$LINE" != "/Applications/"* ]]; then
                sudo rm -rf "$LINE"
                echo "$LINE has been deleted."
            fi
        done
    fi
}

# Start time
START_TIME=$(date +%s)

# Iterate over the apps and delete them
for APP in "${APPS[@]}"; do
    delete_app "$APP"
done

# End time
END_TIME=$(date +%s)

# Calculate the time taken
TIME_TAKEN=$((END_TIME - START_TIME))

echo ""*************Task completed in $TIME_TAKEN seconds to Remove rogue apps"*************"

####################
# CCX Upgrade Code

echo "*************Checking Adobe Apps*************"

# Define URLs for internal and external sources based on architecture
ARCH=$(uname -m)
INTERNAL_DOMAIN="dcwap-v1352-cs.abudhabi.nyu.edu"
if [ "$ARCH" == "x86_64" ]; then
    INTERNAL_CC_URL="http://$INTERNAL_DOMAIN/agents/Adobe/MX-X64-MAN-CCX_en_US_MAC.pkg"
    #EXTERNAL_CC_URL="https://ccmdls.adobe.com/AdobeProducts/StandaloneBuilds/ACCC/ESD/6.3.0/207/osx10/ACCCx6_3_0_207.pkg"
    EXTERNAL_CC_URL="https://github.com/xtian08/ADrepo/raw/main/MX-X64-MAN-CCX_en_US_MAC.pkg"
    RUM_URL="https://deploymenttools.acp.adobeoobe.com/RUM/MacIntel/RemoteUpdateManager.dmg"
elif [ "$ARCH" == "arm64" ]; then
    INTERNAL_CC_URL="http://$INTERNAL_DOMAIN/agents/Adobe/MX-ARM-MAN-CCX_en_US_MACARM.pkg"
    #EXTERNAL_CC_URL="https://ccmdls.adobe.com/AdobeProducts/StandaloneBuilds/ACCC/ESD/6.3.0/207/macarm64/ACCCx6_3_0_207.pkg"
    EXTERNAL_CC_URL="https://github.com/xtian08/ADrepo/raw/main/MX-ARM-MAN-CCX_en_US_MACARM.pkg"
    RUM_URL="https://deploymenttools.acp.adobeoobe.com/RUM/AppleSilicon/RemoteUpdateManager.dmg"
else
    echo "Unsupported architecture: $ARCH"
fi

# Define cache directory
CACHE_DIR="/Users/Shared"

# Function to download file if it doesn't already exist
download_if_not_exists() {
    local url=$1
    local destination=$2

    if [ -f "$destination" ]; then
        echo "$destination already exists. Skipping download."
    else
        echo "Downloading $url to $destination..."
        curl -L -o "$destination" "$url"
    fi
}

# Function to install Creative Cloud
install_creative_cloud() {
    local cc_pkg="$CACHE_DIR/CreativeCloudInstaller.pkg"

    # Check connectivity to internal server
    if ping -c 1 $INTERNAL_DOMAIN &> /dev/null; then
        echo "Internal server reachable. Downloading from internal server..."
        download_if_not_exists "$INTERNAL_CC_URL" "$cc_pkg"
    else
        echo "Internal server not reachable. Downloading from Adobe servers..."
        download_if_not_exists "$EXTERNAL_CC_URL" "$cc_pkg"
    fi

    # Install the package
    sudo installer -pkg "$cc_pkg" -target /

    echo "Adobe Creative Cloud installed successfully."
}

# Check if Adobe Creative Cloud is installed
if [ ! -d "/Applications/Adobe Creative Cloud" ]; then
    install_creative_cloud
else
    echo "Adobe Creative Cloud is already installed."
fi

# Check if Remote Update Manager is already installed
if [ -x "/usr/local/bin/RemoteUpdateManager" ]; then
    echo "Remote Update Manager is already installed."
else
    local rum_dmg="$CACHE_DIR/RemoteUpdateManager.dmg"
    local mount_point="/Volumes/RemoteUpdateManager"

    # Download Remote Update Manager
    download_if_not_exists "$RUM_URL" "$rum_dmg"

    # Mount the DMG
    hdiutil attach "$rum_dmg" -mountpoint "$mount_point"

    # Install Remote Update Manager
    sudo cp "$mount_point/RemoteUpdateManager" /usr/local/bin/
    sudo chmod +x /usr/local/bin/RemoteUpdateManager

    # Unmount the DMG
    hdiutil detach "$mount_point"

    echo "Remote Update Manager installed successfully."
fi

# Run Remote Update Manager silently
sudo /usr/local/bin/RemoteUpdateManager --action=install
wait

echo ""*************Adobe apps check completed"*************"

####################

echo "App Sanity Check Completed"
echo "*************End of Script*************"

exit 0
