#!/bin/bash
# Created by Chris Mariano

echo "###################################################"
echo "******000000******GSD Fix Started******000000******"
echo "###################################################"
start_time=$(date +%s)
echo "*************Start time: $(date)*************"

# Clean tmp dmg files
sudo /bin/rm /tmp/*.dmg >/dev/null 2>&1

function detach_dmg() {
    volumes=("/Volumes/Google Chrome/" "/Volumes/Google Chrome 1/" "/Volumes/Google Chrome 2/" "/Volumes/Thunderbird/" "/Volumes/Thunderbird 1/" "/Volumes/Thunderbird 2/" "/Volumes/Firefox/" "/Volumes/Firefox 1/" "/Volumes/Firefox 2/" "/Volumes/Acrobat")

    for volume in "${volumes[@]}"; do
        diskutil unmount "$volume" > /dev/null 2>&1
        hdiutil detach -force -quiet -verbose "$volume" > /dev/null 2>&1
    done
}

dmg_age="7"
function is_dmg_fresh() {
    local dmg_path="$1"
    if [ -f "$dmg_path" ]; then
        local file_mod_date=$(stat -f "%m" "$dmg_path")
        local current_date=$(date +%s)
        local age=$(( (current_date - file_mod_date) / 86400 ))
        if [ "$age" -lt $dmg_age ]; then
            return 0  # True: DMG is less than $dmg_age days old
        else
            return 1  # False: DMG is older than $dmg_age days
        fi
    else
        return 1  # DMG does not exist
    fi
}

function get_file_metadata() {
    local url="$1"
    local headers=$(curl -sIL "$url")

    local file_size=$(echo "$headers" | grep -i "Content-Length" | tail -n1 | awk '{print $2}' | tr -d '\r')
    local file_type=$(echo "$headers" | grep -i "Content-Type" | tail -n1 | awk '{print $2}' | tr -d '\r')

    echo "$file_size"
}

function compare_metadata() {
    local dmg_path="$1"
    local url="$2"

    if [ -f "$dmg_path" ]; then
        local local_file_size=$(stat -f "%z" "$dmg_path")
        local remote_file_size=$(get_file_metadata "$url")

        if [ "$local_file_size" -eq "$remote_file_size" ]; then
            return 0  # True: File sizes match
        else
            return 1  # False: File sizes differ
        fi
    else
        return 1  # File does not exist locally
    fi
}

####################
# Chrome CODE

# Get version installed
echo "*************Checking Chrome*************"
installed_version="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version | grep -iE "[0-9.]{10,20}" | tr -d " <>-:;/,&\"=#[a-z][A-Z]")"
echo "GC Installed Ver: $installed_version"

DOWNLOAD_URL="https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg"
destination="/users/shared/googlechrome.dmg"

if is_dmg_fresh "$destination" && compare_metadata "$destination" "$DOWNLOAD_URL"; then
    echo "****** Chrome DMG is fresh and metadata matches. Skipping download. ******"
else
    echo "****** Chrome DMG is outdated or metadata mismatch. Downloading again. ******"
    detach_dmg
    curl -o "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
fi

# Continue with mounting, installing, etc.

temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
chrome_latest_stable=$(defaults read "$temp_mount/Google Chrome.app/Contents/Info.plist" CFBundleShortVersionString) > /dev/null 2>&1
echo "GC Stable Ver: $chrome_latest_stable"
hdiutil detach "$temp_mount" > /dev/null 2>&1

install_ChromeDmg() {
    tmp_mount=$(mktemp -d /users/shared/chrome.XXXX)
    hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

    if grep -q "Google Chrome.app" /tmp/RunningApps.txt; then
        echo "****** Application is currently running on target Mac. Proceeding Upgrade. ******"
        install_ChromePkg
    else
        rm -fR "/Applications/Google Chrome.app"
    fi

    echo "****** Install in progress ******"
    rsync -vaz --delete "${tmp_mount}/Google Chrome.app/" "/Applications/Google Chrome.app/" > /dev/null 2>&1
    #cp -R "${tmp_mount}/Google Chrome.app" "/Applications/Google Chrome.app"

    sleep 1

    hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
    detach_dmg
}

install_ChromePkg() {
    open -a "Google Chrome" "chrome://settings/help"
    sleep 5

    if [ -e "/Applications/Google Chrome.app" ]; then
        echo "****** Latest version of Chrome is now installed on target Mac. ******"
    fi
}

check_Running() {
    ps -A | grep "Google Chrome.app" | grep -v "grep" > /tmp/RunningApps.txt

    if grep -q "Google Chrome.app" /tmp/RunningApps.txt; then
        echo "****** Application is currently running on target Mac. Proceeding Upgrade. ******"
        install_ChromePkg
    else
        echo "****** Application is not running on target Mac. Proceeding Clean Install... ******"
        install_ChromeDmg
    fi
}

case "${installed_version}" in
  "${chrome_latest_stable}")
    echo "GC Installed Ver: $installed_version"
    echo "****** Chrome version checked OK (${chrome_latest_stable}) ******"
    detach_dmg
    ;;
  *) 
    echo "GC Installed Ver: $installed_version"
    echo "****** Chrome version differs - installed: ${installed_version}, available: ${chrome_latest_stable} ******"
    check_Running
    ;;
esac


####################
# Firefox CODE

if [ -d "/Applications/Firefox.app" ]; then

echo "*************Checking Firefox*************"
DOWNLOAD_URL="https://download.mozilla.org/?product=firefox-latest&os=osx&lang=en-US"
destination="/users/shared/firefox.dmg"

if is_dmg_fresh "$destination" && compare_metadata "$destination" "$DOWNLOAD_URL"; then
    echo "****** Firefox DMG is fresh and metadata matches. Skipping download. ******"
else
    echo "****** Firefox DMG is outdated or metadata mismatch. Downloading again. ******"
    detach_dmg
    curl -L -o "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
fi

temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
stableFF=$(defaults read "$temp_mount/Firefox.app/Contents/Info.plist" CFBundleShortVersionString)
echo "FF Stable Ver: $stableFF"
FFinstalled_version=$(defaults read "/Applications/Firefox.app/Contents/Info.plist" CFBundleShortVersionString 2>/dev/null)
echo "FF Installed Ver: $FFinstalled_version"
hdiutil detach "$temp_mount" >/dev/null 2>&1

install_FirefoxDmg() {
    tmp_mount=$(mktemp -d /tmp/firefox.XXXX)
    hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

    if grep -q "Firefox.app" /tmp/RunningAppsFF.txt; then
        echo "****** Firefox is currently running on target Mac. Proceeding Upgrade. ******"
        install_FirefoxPkg
    else
        sudo rm -fR "/Applications/Firefox.app"
    fi
    
    sudo ditto "${tmp_mount}/Firefox.app" "/Applications/Firefox.app"

    sleep 1

    hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
    detach_dmg

    if [ -e "/Applications/Firefox.app" ]; then
        echo "****** Latest version of Firefox is installed on target Mac. ******"
    fi
}

install_FirefoxPkg() {
    curl -o /tmp/firefox.pkg "https://download-installer.cdn.mozilla.net/pub/firefox/releases/$stableFF/mac/en-US/Firefox%20$stableFF.pkg"
    sudo -S installer -allowUntrusted -pkg "/tmp/firefox.pkg" -target /

    sudo rm /tmp/firefox.pkg
    detach_dmg

    if [ -e "/Applications/Firefox.app" ]; then
        echo "****** Latest version of Firefox is installed on target Mac. ******"
    fi
}

check_RunningFF() {
    ps -A | grep "Firefox.app" | grep -v "grep" > /tmp/RunningAppsFF.txt

    if grep -q "Firefox.app" /tmp/RunningAppsFF.txt; then
        echo "****** Firefox is currently running on target Mac. Proceeding Upgrade. ******"
        install_FirefoxPkg
    else
        echo "****** Firefox is not running on target Mac. Proceeding Clean Install... ******"
        install_FirefoxDmg
    fi
}

case "${FFinstalled_version}" in
  "${stableFF}")
    echo "****** Firefox version checked OK (${stableFF}) ******"
    detach_dmg
    ;;
  *) 
    if [ ! -d "/Applications/Firefox.app" ]; then
        echo "Firefox is not installed. Exiting."
    else
        echo "****** Firefox version differs - installed: ${FFinstalled_version}, available: ${stableFF} ******"
        check_RunningFF
    fi
    ;;
esac

else
    echo "****** Firefox is not installed ******"
fi

####################
# Thunderbird CODE

# Check if Thunderbird is installed
if [ -d "/Applications/Thunderbird.app" ]; then

echo "*************Checking Thunderbird*************"
DOWNLOAD_URL="https://download.mozilla.org/?product=thunderbird-latest&os=osx&lang=en-US"
destination="/users/shared/thunderbird.dmg"

if is_dmg_fresh "$destination" && compare_metadata "$destination" "$DOWNLOAD_URL"; then
    echo "****** Thunderbird DMG is fresh and metadata matches. Skipping download. ******"
else
    echo "****** Thunderbird DMG is outdated or metadata mismatch. Downloading again. ******"
    detach_dmg
    curl -L -o "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
fi

# Continue with mounting, installing, etc.

temp_mount=$(hdiutil attach "$destination" -nobrowse | grep -o "/Volumes/.*")
stableTB=$(defaults read "$temp_mount/Thunderbird.app/Contents/Info.plist" CFBundleShortVersionString)
echo "TB Stable Ver: $stableTB"
TBinstalled_version=$(defaults read "/Applications/Thunderbird.app/Contents/Info.plist" CFBundleShortVersionString 2>/dev/null)
echo "TB Installed Ver: $TBinstalled_version"
hdiutil detach "$temp_mount" >/dev/null 2>&1

install_ThunderbirdDmg() {

  tmp_mount=`/usr/bin/mktemp -d /tmp/Thunderbird.XXXX`
  hdiutil attach "$destination" -nobrowse -quiet -mountpoint "${tmp_mount}"

    if grep -q "Thunderbird.app" /tmp/RunningAppsTB.txt; then
        echo "****** Thunderbird is currently running on target Mac. Proceeding Upgrade.******"
        install_ThunderbirdPkg
    else
        sudo rm -fR "/Applications/Thunderbird.app"
    fi

  sudo ditto "${tmp_mount}/Thunderbird.app" "/Applications/Thunderbird.app"

  sleep 1

  hdiutil detach "${tmp_mount}" && /bin/rm -rf "${tmp_mount}"
  detach_dmg

  if [ -e "/Applications/Thunderbird.app" ]; then
    echo "****** Latest version of Thunderbird is now installed on target Mac.******"
  fi
}

install_ThunderbirdPkg() {

curl -o /tmp/thunderbird.pkg https://download-installer.cdn.mozilla.net/pub/thunderbird/releases/$stableTB/mac/en-US/Thunderbird%20$stableTB.pkg

sudo -S installer -allowUntrusted -pkg "/tmp/thunderbird.pkg" -target /;

#Remove Temp Files
sudo rm /tmp/thunderbird.pkg
detach_dmg

  if [ -e "/Applications/Thunderbird.app" ]; then
    echo "****** Latest version of Thunderbird is now installed on target Mac.******"
  fi
}

check_RunningTB ()
{
# To find if the app is running, use:
ps -A | grep "Thunderbird.app" | grep -v "grep" > /tmp/RunningAppsTB.txt

if grep -q "Thunderbird.app" /tmp/RunningAppsTB.txt;
then
    echo "****** Thunderbird is currently running on target Mac. Proceeding Upgrade.******"
    install_ThunderbirdPkg
else
    echo "****** Thunderbird is not running on target Mac. Proceeding Clean Install...******"
    install_ThunderbirdDmg
fi
}

# If the version installed differs at all from the available version
# then we want to update
case "${TBinstalled_version}" in
  "${stableTB}")
    echo "****** Thunderbird version checked OK (${stableTB}) ******"
    detach_dmg
    ;;
  *) 
    if [ ! -d "/Applications/Thunderbird.app" ]; then
        echo "Thunderbird is not installed. Exiting."
    else
    echo "****** Thunderbird version differs - installed: ${TBinstalled_version}, available: ${stableTB} ******"
    check_RunningTB
    fi
    ;;
esac

else
    echo "****** Thunderbird is not installed ******"
fi


####################
# Adobe Air CODE

echo "*************Checking Adobe Air*************"
installer="/Applications/Utilities/Adobe AIR Uninstaller.app"
framework="/Library/Frameworks/Adobe AIR.framework"

# run the official uninstaller (works for recent versions)
if [[ -d "$installer" ]]; then
    echo "Uninstalling Adobe AIR"
    "$installer/Contents/MacOS/Adobe AIR Installer" -uninstall ||:
else
    echo "Uninstaller not present"
fi

# also do some manual deleting
[[ -d "$installer" ]] && rm -Rf "$installer"
[[ -d "$framework" ]] && rm -Rf "$framework"

if [[ -d "$framework" ]]; then
    echo "Adobe AIR failed to uninstall"
    exit 1
fi

# Forget packages
echo "Forgetting package"
pkgutilcmd="/usr/sbin/pkgutil"
$pkgutilcmd --pkgs=com.adobe.pkg.AIR && $pkgutilcmd --forget com.adobe.pkg.AIR

echo "****** Adobe Air check completed ******"

####################
# Adobe Reader CODE

echo "*************Checking Acrobat Reader*************"

AR_install() {
    ARCurrVersNormalized=$(echo "$latestver" | sed -e 's/[.]//g')
    echo "ARCurrVersNormalized: $ARCurrVersNormalized"
    urldl="https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/${ARCurrVersNormalized}/AcroRdrDC_${ARCurrVersNormalized}_MUI.dmg"

    #Build URL	
    url="$urldl"
    echo "Latest version of the URL is: $url"

    # Download newer version
    if [ -f "/Users/Shared/acroreader$ARCurrVersNormalized.dmg" ]; then
        echo "$(date): Downloaded file is already in place."
    else 
        echo "$(date): Downloading newer version."
        rm -f /Users/Shared/acroreader*
        /usr/bin/curl -s -o /Users/Shared/acroreader$ARCurrVersNormalized.dmg "$url"
    fi

    # Mount installer disk image
    echo "$(date): Mounting installer disk image."
    /usr/bin/hdiutil attach /Users/Shared/acroreader$ARCurrVersNormalized.dmg -nobrowse -quiet 

    # Installing
    echo "$(date): Installing..."
        # Check if any process with name containing "Acrobat" is running
        if pgrep -f "Acrobat" > /dev/null; then
            # If found, kill the process
            pkill -f "Acrobat"
            echo "Process containing 'Acrobat' in its name has been killed."
        else
            # If not found, display a message
            echo "No process containing 'Acrobat' in its name is currently running."
        fi
        
    sudo rm -rf /Applications/Adobe\ Acrobat\ Reader*.app
    sudo /usr/sbin/installer -pkg "/Volumes/AcroRdrDC_${ARCurrVersNormalized}_MUI/AcroRdrDC_${ARCurrVersNormalized}_MUI.pkg" -target / > /dev/null
   
    sleep 10

    # Unmount installer disk image
    echo "$(date): Unmounting installer disk image."
    /usr/bin/hdiutil detach "$(df | grep -o '/Volumes/AcroRdr.*' | head -n 1)" -quiet -verbose >/dev/null 2>&1
    mounted_volumes=$(df -h | grep AcroRdr${ARCurrVersNormalized} | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."
    sleep 10

    # Deleting disk image
    echo "$(date): Deleting disk image."

    # Double check if the new version got updated
    newlyinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)

    if [ "$latestvernorm" = "$newlyinstalledver" ]; then
        echo "$(date): SUCCESS: Adobe Reader has been updated to version $newlyinstalledver"
    else
        echo "$(date): ERROR: Adobe Reader update unsuccessful, version remains at $currentinstalledver."
        echo "--"	
    fi
}

AR_check_ver() {
    # Get the latest version of Reader available from Adobe's About Reader page.
    latestver=$(curl -s -L https://armmf.adobe.com/arm-manifests/mac/AcrobatDC/reader/current_version.txt)
    echo "AR Stable Ver: $latestver"
    latestvernorm=$(echo "$latestver")

    # Get the version number of the currently-installed Adobe Reader, if any.
    if [ -e "/Applications/Adobe Acrobat Reader DC.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader DC.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat Reader.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read "/Applications/Adobe Acrobat Reader.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    else
        currentinstalledver="0.0"
    fi

    echo "AR Installed Ver: $currentinstalledver"

    if [ "$latestvernorm" = "$currentinstalledver" ]; then
        echo "****** Adobe Reader is up to date. Exiting ******"
    else
        echo "****** Adobe Reader is outdated. Updating ******"
        AR_install
    fi
}

# Check if either Adobe Acrobat Reader or Adobe Acrobat Reader DC is installed
if [ ! -e "/Applications/Adobe Acrobat Reader.app" ] && [ ! -e "/Applications/Adobe Acrobat Reader DC.app" ]; then
    echo "****** Adobe Acrobat Reader is not installed. Exiting ******"
else
    echo "****** Adobe Acrobat Reader is installed. Proceeding ******"
    AR_check_ver
fi

echo "****** Adobe Acrobat Reader check completed ******"


####################
# log4j CODE

echo "*************Checking log4j*************"

# Define variables
jar_file="/Users/Shared/log4jscan-latest.jar"
log_file="/Users/Shared/log4j.log"

# Function to check if JAR file exists
check_jar_existence() {
    if [ -f "$jar_file" ]; then
        echo "JAR file already exists. Skipping download."
        return 0
    else
        return 1
    fi
}

# Function to check if log file is more than 7 days old
is_log_file_old() {
    if [ -f "$log_file" ]; then
        if find "$log_file" -mtime +7 -print | grep -q .; then
            return 0
        else
            return 1
        fi
    else
        echo "Log file does not exist. Running scan..."
        return 0
    fi
}

# Check if log4j JAR file exists
if check_jar_existence; then
    echo "Using existing JAR file: $jar_file"
else
    # Get the latest release URL
    latest_url=$(curl -s https://api.github.com/repos/logpresso/CVE-2021-44228-Scanner/releases/latest | grep "browser_download_url.*\.jar" | cut -d '"' -f 4)
    
    # Download the latest .jar file to /Users/Shared directory
    curl -fsSL -o "$jar_file" "$latest_url"
    
    # Check if download was successful
    if [ $? -eq 0 ]; then
        echo "Downloaded: $jar_file"
    else
        echo "Failed to download JAR file. Exiting."
    fi
fi

# Check if the log file is more than 7 days old or doesn't exist
if is_log_file_old; then
    echo "Log file is either more than 7 days old or does not exist. Running scan..."
    # Run the scanner
    sudo java -jar "$jar_file" --scan-log4j1 --no-empty-report --force-fix / > "$log_file" 2>/dev/null
    echo "****** Scan completed. Log file: $log_file ******"
else
    echo "Log file is not more than 7 days old. Skipping scan."
fi


####################
# Adobe CODE

echo "*************Checking Acrobat Full Version*************"

AB_install2() {

    sudo  rm -rf "/Applications/Adobe Acrobat DC/Adobe Acrobat.app"

    #Check if installer is already downloaded
    DOWNLOAD_URL="https://trials.adobe.com/AdobeProducts/APRO/Acrobat_HelpX/osx10/Acrobat_DC_Web_WWMUI.dmg"
    destination="/users/shared/acrobatfull.dmg"

    if is_dmg_fresh "$destination" && compare_metadata "$destination" "$DOWNLOAD_URL"; then
        echo "****** Acrobat DC DMG is fresh and metadata matches. Skipping download. ******"
    else
        echo "****** Acrobat DC is outdated or metadata mismatch. Downloading again. ******"

        detach_dmg
        curl -o "$destination" "$DOWNLOAD_URL" >/dev/null 2>&1
    fi

    hdiutil attach "$destination" -nobrowse -quiet
    sudo /usr/sbin/installer -pkg '/Volumes/Acrobat/Acrobat/Acrobat DC Installer.pkg' -target /
    sleep 10
    detach_dmg
    echo "****** Acrobat DC full install performed as updater failed. ******"
}

AB_install() {
    ABCurrVersNormalized=$( echo $latestver | sed -e 's/[.]//g' )
    echo "ABCurrVersNormalized: $ABCurrVersNormalized"
    urldl="https://ardownload2.adobe.com/pub/adobe/acrobat/mac/AcrobatDC/${ABCurrVersNormalized}/AcrobatDCUpd${ABCurrVersNormalized}.dmg"

    #Build URL	
    url="$urldl"
    echo "Latest version of the URL is: $url"
    
    # Download newer version
    ABdestination="/Users/Shared/acrobatupd$ABCurrVersNormalized.dmg"

    if is_dmg_fresh "$ABdestination" && compare_metadata "$ABdestination" "$url"; then
        echo "****** Acrobat DMG is fresh and metadata matches. Skipping download. ******"
    else
        echo "****** Acrobat DMG is outdated or metadata mismatch. Downloading again. ******"
        sudo rm -f /Users/Shared/acrobatupd*
        curl -s -o "$ABdestination" "$url" >/dev/null 2>&1
    fi

    # Mount installer disk image
    echo "$(date): Mounting installer disk image."
    /usr/bin/hdiutil attach "$ABdestination" -nobrowse -quiet 

    # Installing
    echo "$(date): Installing..."
        # Check if any process with name containing "Acrobat" is running
        if pgrep -f "Acrobat" > /dev/null; then
            # If found, kill the process
            pkill -f "Acrobat"
            echo "Process containing 'Acrobat' in its name has been killed."
        else
            # If not found, display a message
            echo "No process containing 'Acrobat' in its name is currently running."
        fi
    sudo /usr/sbin/installer -pkg /Volumes/AcrobatDCUpd${ABCurrVersNormalized}/AcrobatDCUpd${ABCurrVersNormalized}.pkg -target / #> /dev/null
   
    sleep 10

    # Unmount installer disk image
    echo "$(date): Unmounting installer disk image."
    /usr/bin/hdiutil detach "$(df | grep -o '/Volumes/AcrobatDCUpd${ABCurrVersNormalized}' | head -n 1)" -quiet -verbose >/dev/null 2>&1
    /usr/bin/hdiutil detach $(/bin/df | /usr/bin/grep 'AcrobatDCUpd${ABCurrVersNormalized}' | awk '{print $1}') -quiet -verbose >/dev/null 2>&1
    #mounted_volumes=$(df -h | grep '^/dev/' | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."
    mounted_volumes=$(df -h | grep AcrobatDCUpd${ABCurrVersNormalized} | awk '{print $1}') && for volume in $mounted_volumes; do echo "Unmounting $volume"; diskutil unmount "$volume"; done; echo "All volumes unmounted."

    sleep 10

    # Deleting disk image
    echo "$(date): Deleting disk image."

    # Double check if the new version got updated
    error_count=0

    newlyinstalledver_01=$(/usr/bin/defaults read "/Applications/Adobe Acrobat.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    newlyinstalledver_02=$(/usr/bin/defaults read "/Applications/Adobe Acrobat DC.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)
    newlyinstalledver_03=$(/usr/bin/defaults read "/Applications/Adobe Acrobat DC/Adobe Acrobat.app/Contents/Info" CFBundleShortVersionString 2>/dev/null)

    if [ "$latestvernorm" = "$newlyinstalledver_01" ] || [ "$latestvernorm" = "$newlyinstalledver_02" ] || [ "$latestvernorm" = "$newlyinstalledver_03" ]; then
    echo "$(date): SUCCESS: Adobe Full has been updated to version $latestvernorm"
    else
    echo "$(date): ERROR: Adobe Full update unsuccessful, version remains at $currentinstalledver."
    
        error_count=$((error_count + 1))
        if [ $error_count -eq 2 ]; then
            echo "$(date): ERROR: Second failure detected, exiting with return code 1."
            else
            AB_install2
        fi
fi
}

AB_check_ver() {
    # Get the latest version of AB  available from Adobe's About AB  page.
    latestver=$(curl -s -L https://armmf.adobe.com/arm-manifests/mac/AcrobatDC/acrobat/current_version.txt)
    echo "AB Stable Ver: $latestver"
    latestvernorm=$(echo "$latestver")

    # Get the version number of the currently-installed Adobe Full, if any.
    if [ -e "/Applications/Adobe Acrobat DC.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat\ DC.app/Contents/Info CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat.app/Contents/Info CFBundleShortVersionString 2>/dev/null)
    elif [ -e "/Applications/Adobe Acrobat DC/Adobe Acrobat.app" ]; then
        currentinstalledver=$(/usr/bin/defaults read /Applications/Adobe\ Acrobat\ DC/Adobe\ Acrobat.app/Contents/Info CFBundleShortVersionString 2>/dev/null)   
    else
        currentinstalledver="0.0"
    fi

    echo "AB Installed Ver: $currentinstalledver"

    if [ "$latestvernorm" = "$currentinstalledver" ]; then
        echo "****** Adobe Full is up to date. Exiting ******"
    else
        echo "****** Adobe Full is outdated. Updating ******"
        AB_install
    fi
}

# Check if either Adobe Acrobat AB  or Adobe Acrobat AB  DC is installed
if [ ! -e "/Applications/Adobe Acrobat.app" ] && [ ! -e "/Applications/Adobe Acrobat DC.app" ] && [ ! -e "/Applications/Adobe Acrobat DC/Adobe Acrobat.app" ]; then
    echo "****** Adobe Acrobat Full is not installed. Exiting ******"
else
    echo "****** Adobe Acrobat Full is installed. Proceeding ******"
    AB_check_ver
    AB_check_ver
fi

echo "****** Adobe Acrobat Full check completed ******"

####################
# MSO CODE

# Function to install Microsoft AutoUpdate
install_MAU() {
    echo "Installing Microsoft AutoUpdate..."
    curl -L -o "/tmp/office/mau2.pkg" "https://go.microsoft.com/fwlink/?linkid=830196"
    sudo installer -allowUntrusted -verboseR -pkg "/tmp/office/mau2.pkg" -target /
}

# Main script starts here
echo "*************Checking Microsoft Office*************"

# Check if Microsoft AutoUpdate app exists
if [ -e "/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app" ]; then
    echo "Microsoft AutoUpdate is installed."
else
    echo "Microsoft AutoUpdate is not installed. Installing..."
    mkdir -p "/tmp/office"
    install_MAU || { echo "Error: Failed to install Microsoft AutoUpdate.";}
fi

# Open Microsoft AutoUpdate app in background
echo "Opening Microsoft AutoUpdate app..."
#open -j -g "/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app" &

# Continue script without waiting for the app to terminate
echo "Continuing script execution..."

# Run terminal command to install updates in background
echo "Installing updates..."
sudo /Library/Application\ Support/Microsoft/MAU2.0/Microsoft\ AutoUpdate.app/Contents/MacOS/msupdate --install --terminate 7200 > sudo /private/var/log/WS1-officeUP.log 2>&1 &

# URL for fetching the latest version of Microsoft Word from Homebrew API
brew_api_url="https://formulae.brew.sh/api/cask/microsoft-word.json"

# Function to fetch the latest version from Homebrew API
get_latest_version() {
    #curl -s "$brew_api_url" | jq -r '.version'
    curl -s "$brew_api_url" | grep -o '"version":"[^"]*"' | awk -F'"' '{print $4}' | head -n 1    
}

# Function to get the installed version of Microsoft Word
get_installed_version() {
    if [[ -d "/Applications/Microsoft Word.app" ]]; then
        defaults read "/Applications/Microsoft Word.app/Contents/Info.plist" CFBundleShortVersionString
    else
        echo "Not Installed"
    fi
}

# Fetch the latest and installed versions
latest_version=$(get_latest_version)
installed_version=$(get_installed_version)

# Compare versions
if [[ $installed_version == "Not Installed" ]]; then
    echo "Microsoft Word is not installed."
elif [[ "$installed_version" == "$latest_version" ]]; then
    echo "Microsoft Word is up-to-date (version: $installed_version)."
else
    echo "Update available: Latest version is $latest_version, installed version is $installed_version."
fi


echo "*************Check complete for Microsoft Office*************"

####################
# Silverlight CODE

# Check if Silverlight is installed

echo "*************Checking Silverlight*************"

# Remove WPFe
sudo -S rm -rf /Library/Internet\ Plug-Ins/WPFe.plugin/
sudo -S rm -rf /Library/Internet\ Plug-Ins/Silverlight.plugin/

sudo -S rm -rf /Library/Receipts/Silverlight.pkg/
sudo -S rm -rf /Library/Receipts/Silverlight_W2.pkg/
sudo -S rm -rf /Library/Receipts/Silverlight_W2_MIX.pkg/
echo ""
echo "*************Check complete for Silverlight*************"

####################
# Java CODE

# Check if Java is installed

echo "*************Checking Java*************"

# Variables
#log_name="ZuluJDK"
cask_json="zulu.json"
destination="/Users/Shared/"

# Function to log messages
#log() {
#    echo "$(date +'%Y-%m-%d %H:%M:%S') $1" >> "$log_file"
#}

# Function to generate URL
generate_url_latest() {
    latest_json=$(curl -s "https://formulae.brew.sh/api/cask/$cask_json")
    latest_stable=$(echo "$latest_json" | grep -o '"version":"[^"]*"' | awk -F'"' '{print $4}')
    version1=$(echo "$latest_stable" | awk -F ',' '{print $1}')
    version2=$(echo "$latest_stable" | awk -F ',' '{print $2}')
    version3=$(echo $version1 | awk -F '.' '{print $1}')
    url="https://cdn.azul.com/zulu/bin/zulu${version2}-ca-jdk${version1}-macosx_"
}

# Function to download file
download_file() {
    cleaned_url="$1"
    filename=$(basename "$cleaned_url")
    jfilepath="/Users/Shared/$filename"
    echo "Filename: $filename"

    if is_dmg_fresh "$jfilepath" && compare_metadata "$jfilepath" "$cleaned_url"; then
        echo "****** Java DMG is fresh and metadata matches. Skipping download. ******"
    else
        echo "****** Java DMG is outdated or metadata mismatch. Downloading again. ******"
        detach_dmg
        curl -o "$jfilepath" "$cleaned_url" >/dev/null 2>&1
    fi

}

# Function to determine architecture and download appropriate file
jdk_download_dmg() {
    arch=$(uname -m)
    case "$arch" in
        arm|aarch64|arm64)
            echo "ARM architecture. Downloading arm64 binaries..."
            cleaned_url="$url"aarch64.dmg ;;
        x86_64|i686|i386)
            echo "Intel architecture. Downloading x64 binaries..."
            cleaned_url="$url"x64.dmg ;;
        *)
            echo "Unknown architecture: $arch"

    esac
    dmg_file="$destination$(basename "$cleaned_url")"
    download_file "$cleaned_url"

}

# Function to remove JRE
remove_jre() {
    local jre_path
    jre_path="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin"

    echo "$(date): Clean up JRE traces..."
    sudo rm -rf "$jre_path"
    sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane
    sudo rm -fr ~/Library/Application\ Support/Oracle/Java
    sudo rm -rf /Library/Java/JavaVirtualMachines
    sudo mkdir /Library/Java/JavaVirtualMachines

}

# Function to mount DMG file, install PKG, and unmount DMG
mount_and_install_pkg() {
    echo "$(date): Updating Java..."
    local dmg_file="$1"
    local mounted_dir="/Volumes/ZuluInstaller"
    local pkg_file
    dmg_file="$1"
    echo "Mounting $dmg_file"
    hdiutil attach "$dmg_file" -mountpoint "$mounted_dir"
    remove_jre
    pkg_file=$(sudo find "$mounted_dir" -name "*.pkg" -maxdepth 1 -mindepth 1 -exec echo {} \;)
    echo "Installing $pkg_file ****************"
    sudo installer -pkg "$pkg_file" -target "/"
    hdiutil detach "$mounted_dir"
}


# Function to Check Java version
check_java_version() {
    generate_url_latest
    java_version=$(java -version 2>&1 | tr '[:upper:]' '[:lower:]')
    comparison_strings=("unable" "error")
    match_found=false

    for comparison_string in "${comparison_strings[@]}"; do
        if [[ $java_version == *"$comparison_string"* ]]; then
            echo "Java encountered an issue: $comparison_string"
            echo "Java is not installed or not working"
            remove_jre
            match_found=true
        fi
    done

    if ! $match_found; then
        # Check if the version string exists in $java_version
        if [[ $java_version == *"\"$version1\""* ]]; then
            echo "Skipping JDK update as version $version1 is found in Java version."
        else
            echo "Java is installed and working"
            echo "Performing JDK update..."
            generate_url_latest
            jdk_download_dmg
            mount_and_install_pkg "$dmg_file"
        fi
    fi
}


if [[ $(find /Library/Java/JavaVirtualMachines/ -type d -iname "*jdk*" 2>/dev/null) ]]; then
    echo "Folder with 'jdk' found."
    echo "Checking Java version"
    check_java_version
else
    echo "No folder with 'jdk' found."
    echo "Removing JRE"
    remove_jre
fi

# Function to search rougue Java files and rename them
process_files() {
    local file_names=("$@")
    local files_found=0

    for file in "${file_names[@]}"; do
        echo "Searching for $file..."
        results=$(sudo mdfind "kMDItemFSName == '$file'" | grep -v "^/Library/Java/JavaVirtualMachines/")
        
        if [ -n "$results" ]; then
            files_found=1
            while IFS= read -r filepath; do
                if [[ "$file" == *.jar ]]; then
                    newpath="${filepath%.jar}.ogjarbak"
                    echo "Renaming $filepath to $newpath"
                    sudo mv "$filepath" "$newpath"
                else
                    echo "Found $filepath (already .ogjarbak)"
                fi
            done <<< "$results"
        fi
    done

    return $files_found
}

# Define file lists
jar_files=("rt.jar" "jrt-fs.jar" "catalina.jar" "struts-core-1.3.8.jar")
ogjarbak_files=("rt.ogjarbak" "jrt-fs.ogjarbak")

# Initialize flag
java_required=0

# Process .jar files
process_files "${jar_files[@]}"
if [ $? -eq 1 ]; then
    java_required=1
fi

# Process .ogjarbak files
process_files "${ogjarbak_files[@]}"
if [ $? -eq 1 ]; then
    java_required=1
fi

force_install_jdk()
{
#Check if JDK is installed
if [[ $(find /Library/Java/JavaVirtualMachines/ -type d -iname "*jdk*" 2>/dev/null) ]]; then
    echo "Folder with 'jdk' found."
    echo "Checking Java version"
    check_java_version
else
    generate_url_latest
    jdk_download_dmg
    mount_and_install_pkg "$dmg_file"
fi
}

# Check if Java is required
if [ $java_required -eq 1 ]; then
    echo "Java is required. Install Zulu JDK"
    force_install_jdk
fi

echo "*************Check complete for Java*************"


####################
# Fiji CODE

# Check if Fiji is installed

echo "*************Checking Fiji*************"

generate_url_ocho() {
    cask_json="zulu@8.json"
    latest_json=$(curl -s "https://formulae.brew.sh/api/cask/$cask_json")
    latest_stable=$(echo "$latest_json" | grep -o '"version":"[^"]*"' | awk -F'"' '{print $4}')
    version1=$(echo "$latest_stable" | awk -F ',' '{print $1}')
    version2=$(echo "$latest_stable" | awk -F ',' '{print $2}')
    version3=$(echo $version1 | awk -F '.' '{print $1}')
    url="https://cdn.azul.com/zulu/bin/zulu${version2}-ca-jdk${version1}-macosx_"
    echo "$url"
}

# Function to check if Fiji.app exists
check_fiji_exists() {
    if [ -d "/Applications/Fiji.app/java" ]; then
        echo "Fiji.app found. Proceeding with deletion and update."
        return 0
    else
        echo "Fiji.app not found. Skipping download and install."
        return 1
    fi
}

# Function to check and delete Fiji.app
delete_fiji() {
    echo "Deleting Fiji.app..."
    sudo rm -rf "/Applications/Fiji.app"
    echo "Fiji.app deleted."
}

# Function to install Fiji
install_fiji() {
    local zip_path="/Users/Shared/fiji-nojre.zip"
    local temp_dir="/tmp/fiji_install"

    if [ -f "$zip_path" ]; then
        echo "Extracting Fiji..."
        mkdir -p "$temp_dir"
        unzip -q "$zip_path" -d "$temp_dir"

        echo "Installing Fiji..."
        sudo mv "$temp_dir/Fiji.app" /Applications/

        echo "Cleaning up..."
        rm -rf "$temp_dir"
        rm -f "$zip_path"

        echo "Fiji installation complete."
    else
        echo "Fiji ZIP file not found. Skipping installation."
    fi
}

# Function to download Fiji ZIP file
download_fiji() {
    fiji_url="https://downloads.micron.ox.ac.uk/fiji_update/mirrors/fiji-latest/fiji-nojre.zip"
    fijiname=$(basename "$fiji_url")
    fijipath="/Users/Shared/$fijiname"

    if is_dmg_fresh "$fijipath" && compare_metadata "$fijipath" "$fiji_url"; then
        echo "****** Fiji DMG is fresh and metadata matches. Skipping download. ******"
    else
        echo "****** Fiji DMG is outdated or metadata mismatch. Downloading again. ******"
        curl -o "$fijipath" "$fiji_url" #>/dev/null 2>&1
    fi

    install_fiji
    generate_url_ocho
    jdk_download_dmg
    mount_and_install_pkg "$dmg_file"

}

# Main script execution
if check_fiji_exists; then
    delete_fiji
    download_fiji
else
    echo "No action taken."
fi

# Check if Fiji.app exists and determine if Java is required
if [ -d "/Applications/Fiji.app" ]; then
    generate_url_ocho
    jdk_download_dmg
    mount_and_install_pkg "$dmg_file"
fi

echo "*************Check complete for Fiji *************"

####################
# Safari CODE

# Check if Safari is installed

echo "*************Checking Safari*************"

# Function to compare version numbers
version_compare() {
    if [[ "$1" == "$2" ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# Function to download and install the package
download_and_install_pkg() {
    local url=$1
    local pkg_name=$(basename $url)
    
    echo "Downloading $pkg_name..."
    if ! curl -O $url; then
        echo "Failed to download $pkg_name. URL may be dead or unreachable."
        return 1
    fi

    echo "Installing $pkg_name..."
    if ! sudo installer -pkg $pkg_name -target /; then
        echo "Failed to install $pkg_name."
        rm -f $pkg_name
        return 1
    fi

    echo "Cleaning up..."
    rm -f $pkg_name
    return 0
}

# Function to handle the main logic
handle_safari_installation() {
    # Get the current macOS version
    local macos_version=$(sw_vers -productVersion)

    # Define the version boundaries
    local min_version="11.0"
    local max_version="14.0"

    # Check if the current version is within the specified range
    version_compare $macos_version $min_version
    if [[ $? -eq 2 ]]; then
        echo "macOS version is below $min_version. Skipping installation."
        return
    fi

    version_compare $macos_version $max_version
    if [[ $? -eq 1 ]]; then
        echo "macOS version is above $max_version. Skipping installation."
        return
    fi

    # Determine the URL based on the macOS version
    local pkg_url=""
    if [[ $macos_version =~ ^11 ]]; then
        pkg_url="http://swcdn.apple.com/content/downloads/47/04/042-27539-A_JOWCKWG03T/q1askvrrids8ykmi9ok73aqmj05kzskcya/Safari16.6.1BigSurAuto.pkg"
    elif [[ $macos_version =~ ^12 ]]; then
        pkg_url="https://swcdn.apple.com/content/downloads/19/54/062-47822-A_BHCA3624RA/oixd7i5b8y3g67u6x0upt45m0u2xotc4eh/Safari17.6MontereyAuto.pkg"
    elif [[ $macos_version =~ ^13 ]]; then
        pkg_url="https://swcdn.apple.com/content/downloads/13/25/062-54036-A_XVUR4I6SMD/esu8iadazzrovr604obu8lj9oh0k9we67c/Safari18.2VenturaAuto.pkg"
     elif [[ $macos_version =~ ^14 ]]; then
        pkg_url="https://swcdn.apple.com/content/downloads/20/42/062-54032-A_STP1529CJF/d2z134omlodvtwayeijkkfabwp2fjz3qqy/Safari18.2SonomaAuto.pkg"
    else
        echo "macOS version not supported. Skipping installation."
        return
    fi

    # Download and install the package
    download_and_install_pkg $pkg_url
}

# Main script execution
handle_safari_installation

echo "*************Check complete for Safari for macOS 11-14 only *************"

####################
# Rogue APPS CODE

echo "*************Checking Rogue Apps*************"

# Define the names of the apps
APPS=("Google Chrome.app" "Safari.app" "Firefox.app" "Thunderbird.app" "Foxit Reader.app")

# Function to find and delete app using mdfind
delete_app() {
    local APP_NAME=$1
    echo "Searching for $APP_NAME..."
    local RESULTS=$(mdfind "kMDItemFSName == '$APP_NAME' && ! kMDItemPath == '/Applications/*'")
    if [ -z "$RESULTS" ]; then
        echo "No instances of $APP_NAME found outside /Applications."
    else
        echo "$RESULTS" | while read -r LINE; do
            if [[ "$LINE" != "/Applications/"* ]]; then
                sudo rm -rf "$LINE"
                echo "$LINE has been deleted."
            fi
        done
    fi
}

# Start time
START_TIME=$(date +%s)

# Iterate over the apps and delete them
for APP in "${APPS[@]}"; do
    delete_app "$APP"
done

# End time
END_TIME=$(date +%s)

# Calculate the time taken
TIME_TAKEN=$((END_TIME - START_TIME))

echo ""*************Task completed in $TIME_TAKEN seconds to Remove rogue apps"*************"

####################
# CCX Upgrade Code

echo "*************Checking Adobe Apps*************"

# Define URLs for internal and external sources based on architecture
ARCH=$(uname -m)
INTERNAL_DOMAIN="dcwap-v1352-cs.abudhabi.nyu.edu"
if [ "$ARCH" == "x86_64" ]; then
    INTERNAL_CC_URL="http://$INTERNAL_DOMAIN/agents/Adobe/MX-X64-MAN-CCX_en_US_MAC.pkg"
    #EXTERNAL_CC_URL="https://ccmdls.adobe.com/AdobeProducts/StandaloneBuilds/ACCC/ESD/6.3.0/207/osx10/ACCCx6_3_0_207.pkg"
    EXTERNAL_CC_URL="https://github.com/NYUAD-IT/nyrepo/raw/main/MX-X64-MAN-CCX_en_US_MAC.pkg"
    RUM_URL="https://deploymenttools.acp.adobeoobe.com/RUM/MacIntel/RemoteUpdateManager.dmg"
elif [ "$ARCH" == "arm64" ]; then
    INTERNAL_CC_URL="http://$INTERNAL_DOMAIN/agents/Adobe/MX-ARM-MAN-CCX_en_US_MACARM.pkg"
    #EXTERNAL_CC_URL="https://ccmdls.adobe.com/AdobeProducts/StandaloneBuilds/ACCC/ESD/6.3.0/207/macarm64/ACCCx6_3_0_207.pkg"
    EXTERNAL_CC_URL="https://github.com/NYUAD-IT/nyrepo/raw/main/MX-ARM-MAN-CCX_en_US_MACARM.pkg"
    RUM_URL="https://deploymenttools.acp.adobeoobe.com/RUM/AppleSilicon/RemoteUpdateManager.dmg"
else
    echo "Unsupported architecture: $ARCH"
fi

# Define cache directory
CACHE_DIR="/Users/Shared"

# Function to download file if it doesn't already exist
download_if_not_exists() {
    local url=$1
    local destination=$2

    if [ -f "$destination" ]; then
        echo "$destination already exists. Skipping download."
    else
        echo "Downloading $url to $destination..."
        curl -L -o "$destination" "$url"
    fi
}

# Check if Remote Update Manager is already installed
if [ -x "/usr/local/bin/RemoteUpdateManager" ]; then
    echo "Remote Update Manager is already installed."
else
    rum_dmg="$CACHE_DIR/RemoteUpdateManager.dmg"
    mount_point="/Volumes/RemoteUpdateManager"

    # Download Remote Update Manager
    download_if_not_exists "$RUM_URL" "$rum_dmg"

    # Mount the DMG
    hdiutil attach "$rum_dmg" -mountpoint "$mount_point"

    # Install Remote Update Manager
    sudo cp "$mount_point/RemoteUpdateManager" /usr/local/bin/
    sudo chmod +x /usr/local/bin/RemoteUpdateManager

    # Unmount the DMG
    hdiutil detach "$mount_point"

    echo "Remote Update Manager installed successfully."
fi

# Run Remote Update Manager silently
echo "Adobe Apps Update in progress..."
sudo /usr/local/bin/RemoteUpdateManager --action=install

#sleep 60

echo "*************Adobe apps check completed*************"

####################
# SU CODE

echo "*************Checking MacOS SU*************"
echo "Performing Software Update Check for macOS"
safariSU=$(softwareupdate -lr)

if echo "$safariSU" | grep -q "found"; then
    echo "*************Notify for updated*************"
    #osascript -e 'display alert "macOS update is available" message "Please check for updates in System Settings." buttons {"OK"}'
    #open "x-apple.systempreferences:com.apple.preferences.softwareupdate"
else
    echo "*************No update found*************"
fi
echo "****** macOS SU check completed ******"

####################
# VLC CODE

echo "*************Checking VLC*************"
mkdir /tmp/vlc
cd /tmp/vlc || exit
url="https://get.videolan.org/vlc/last/macosx/"
version_pattern='[0-9]+\.[0-9]+\.[0-9]+'
latestver=$(curl -s "$url" | grep -oE "$version_pattern" | head -n 1)
echo "VLC version: $latestver"
currentinstalledver=`/usr/bin/defaults read /Applications/VLC.app/Contents/Info CFBundleVersion | sed -e 's/0 //g' -e 's/(//g' -e 's/)//g'`
mxarch=$(uname -m)
echo "Arch is: ${mxarch}"

install_vlc() {
sudo ditto -rsrc "/Volumes/vlc/VLC.app" "/Applications/VLC.app"
hdiutil unmount "/Volumes/vlc"
rm -rf /tmp/vlc
echo "Latest VLC Installed"
}

case "$mxarch" in
    arm|aarch64|arm64)
        if [[ "${currentinstalledver}" != "${latestver}" ]] && [[ "${mxarch}" == "arm64" ]]; then
        echo "Installing VLC for ARM"
        curl -L -o vlcARM.dmg https://get.videolan.org/vlc/last/macosx/vlc-${latestver}-arm64.dmg
        hdiutil mount -nobrowse /tmp/vlc/vlcARM.dmg -mountpoint /Volumes/vlc
        install_vlc
        else
        echo "VLC up to date"
        fi ;;
    x86_64|i686|i386)
        if [[ "${currentinstalledver}" != "${latestver}" ]] && [[ "$mxarch" == "x86_64" ]]; then
        echo "Installing VLC for Intel"
        curl -L -o vlcX86.dmg https://get.videolan.org/vlc/last/macosx/vlc-${latestver}-intel64.dmg
        hdiutil mount -nobrowse /tmp/vlc/vlcX86.dmg -mountpoint /Volumes/vlc
        install_vlc
        else
        echo "VLC up to date"
        fi ;;
    *)
        echo "Unknown architecture: $mxarch"
esac
echo "****** VLC check completed ******"
####################

echo "*************Manual files removal*************"
# Paths to delete
paths=(
    "/Applications/Adobe Acrobat 2015"
    "/Applications/Adobe Digital Editions 4.5.app"
    "/Applications/Adobe Illustrator CC "{2015..2019} "/Applications/Adobe Illustrator "{2020..2023}
    "/Applications/Adobe Photoshop CC "{2015..2018} "/Applications/Adobe Photoshop "{2020..2023}
    "/private/var/root/.Trash/Adobe Acrobat Reader.app"
    "/private/var/root/.Trash/Adobe Reader19-49-38.app"
    "/Users/mm9511/Library/CloudStorage/GoogleDrive-mm9511@nyu.edu/My Drive/Adobe Acrobat Reader.app"
    "/Applications/Adobe Acrobat XI Pro"
    "/Users/ag9141/Documents/mpi/Applications/Adobe Acrobat Reader DC.app"
    "/Applications/Adobe Animate CC 2017"
    "/Applications/Adobe Animate 2022"
    "/Applications/Adobe Illustrator CC 2015.3"
    "/Applications/Adobe Photoshop CC 2015.5"
    "/Users/ao1217/Downloads/Fiji.app"
    "/Users/ag6042/Downloads/download26042024/Fiji.app"
    "/Applications/Fiji 3.app"
    "/Applications/Fiji 2.app"
    "/Users/mohamadabbas/Desktop/Desktop/Shows/Programs/Mac 2/__MACOSX/VLC.app"
)

# Delete specified paths if they exist
for path in "${paths[@]}"; do
    [[ -e "$path" ]] && echo "Deleting: $path" && sudo rm -rf "$path" || echo "Path not found, skipping: $path"
done

# Find and delete any .app files with "adobe" in Trash directories
echo "Searching for .app files with 'adobe' in Trash directories..."
find /private/var/root/.Trash /Users/*/.Trash -type d -iname '*adobe*.app' -print0 | while IFS= read -r -d '' trash_app; do
    echo "Deleting from Trash: $trash_app"
    sudo rm -rf "$trash_app"
done
echo "*************Cleanup completedd*************"

####################
# Brew CODE

echo "*************Checking Brew*************"
# Install Command Line Tools for Xcode

echo "Checking Command Line Tools for Xcode"
# Only run if the tools are not installed yet
# To check that try to print the SDK path
xcode-select -p &> /dev/null
if [ $? -ne 0 ]; then
  echo "Command Line Tools for Xcode not found. Installing from softwareupdate…" 
# This temporary file prompts the 'softwareupdate' utility to list the Command Line Tools
  touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
  PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | sed 's/^[^C]* //')
  softwareupdate -i "$PROD" --verbose;

# Check if Command Line Tools are installed
  xcode-select -p &> /dev/null
  if [ $? -eq 0 ]; then
    echo "Command Line Tools for Xcode have been installed."
  else
    echo "Command Line Tools for Xcode installation failed!"
    return 1
  fi
fi

# Check Brew and start logging
echo "Homebrew Installation"

# Set up variables and functions here
consoleuser=$(stat -f "%Su" /dev/console)
echo "Console user is $consoleuser"

if [[ -e /usr/local/bin/brew ]]; then
    echo "Homebrew update check 1"
    su -l "$consoleuser" -c "/usr/local/bin/brew update"
fi

# are we in the right group
check_grp=$(groups ${consoleuser} | grep -c '_developer')
if [[ $check_grp != 1 ]]; then
    /usr/sbin/dseditgroup -o edit -a "${consoleuser}" -t user _developer
    chown -R "${consoleuser}":_developer /usr/local/Cellar 
fi

# Have the xcode command line tools been installed?
echo "Checking for Xcode Command Line Tools installation"
check=$( pkgutil --pkgs | grep -c "CLTools_Executables" )

if [[ "$check" != 1 ]]; then
    echo "Installing Xcode Command Tools"
    # This temporary file prompts the 'softwareupdate' utility to list the Command Line Tools
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    clt=$(softwareupdate -l | grep -B 1 -E "Command Line (Developer|Tools)" | awk -F"*" '/^ +\*/ {print $2}' | sed 's/^ *//' | tail -n1)
    # the above don't work in Catalina so ...
    if [[ -z $clt ]]; then
        clt=$(softwareupdate -l | grep  "Label: Command" | tail -1 | sed 's#* Label: (.*)#1#')
    fi
    softwareupdate -i "$clt"
    rm -f /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    /usr/bin/xcode-select --switch /Library/Developer/CommandLineTools
fi

# Is homebrew already installed?
if [[ ! -e /usr/local/bin/brew ]]; then
    # Install Homebrew. This doesn't like being run as root so we must do this manually.
    echo "Installing Homebrew"

    mkdir -p /usr/local/Homebrew
    # Curl down the latest tarball and install to /usr/local
    curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C /usr/local/Homebrew

    # Manually make all the appropriate directories and set permissions
    mkdir -p /usr/local/Cellar /usr/local/Homebrew mkdir /usr/local/Caskroom /usr/local/Frameworks /usr/local/bin
    mkdir -p /usr/local/include /usr/local/lib /usr/local/opt /usr/local/etc /usr/local/sbin
    mkdir -p /usr/local/share/zsh/site-functions /usr/local/var
    mkdir -p /usr/local/share/doc /usr/local/man/man1 /usr/local/share/man/man1
    chown -R "${consoleuser}":_developer /usr/local/*
    chmod -R g+rwx /usr/local/*
    chmod 755 /usr/local/share/zsh /usr/local/share/zsh/site-functions

    # Create a system wide cache folder  
    mkdir -p /Library/Caches/Homebrew
    chmod g+rwx /Library/Caches/Homebrew
    chown "${consoleuser}:_developer" /Library/Caches/Homebrew

    # put brew where we can find it
    ln -s /usr/local/Homebrew/bin/brew /usr/local/bin/brew

    # Install the MD5 checker or the recipes will fail
    su -l "$consoleuser" -c "/usr/local/bin/brew install md5sha1sum"
    echo 'export PATH="/usr/local/opt/openssl/bin:$PATH"' | 
    tee -a /Users/${consoleuser}/.bash_profile /Users/${consoleuser}/.zshrc
    chown ${consoleuser} /Users/${consoleuser}/.bash_profile /Users/${consoleuser}/.zshrc

    # clean some directory stuff for Catalina
    chown -R root:wheel /private/tmp
    chmod 777 /private/tmp
    chmod +t /private/tmp
fi

# Make sure everything is up to date
echo "Updating Homebrew"
sudo chown -R "$consoleuser" /usr/local/Homebrew
su -l "$consoleuser" -c "/usr/local/bin/brew update" 2>&1

# echo user that all is completed
echo "Homebrew installation complete"

# Path to Homebrew
brew_path="/usr/local/bin/brew"

# List of applications and corresponding cask names
app_list=(
    "/Applications/Firefox.app,firefox"
    "/Applications/VLC.app,vlc"
    "/Applications/zoom.us.app,zoom"
    "/Applications/Google Chrome.app,google-chrome"
    "/Applications/Google Drive.app,google-drive"
    "/Applications/Cisco Jabber.app,cisco-jabber"
    "/Applications/Microsoft Outlook.app,microsoft-office-businesspro"
    "/Applications/Adobe Acrobat Reader.app,adobe-acrobat-reader"
    "/Applications/Adobe Acrobat DC,adobe-acrobat-pro"
    "/Applications/Wireshark.app,wireshark"
    "/Applications/VMware Fusion.app,vmware-fusion"
    "/Applications/Thunderbird.app,thunderbird"
)

for app_entry in "${app_list[@]}"; do
    app_path=$(echo "$app_entry" | cut -d ',' -f 1)
    cask_name=$(echo "$app_entry" | cut -d ',' -f 2)

    if [[ -d "$app_path" ]]; then
        echo "Installing $cask_name..."
        su -l "$consoleuser" -c "$brew_path install --cask --force --verbose $cask_name"
    else
        echo "Application not found at $app_path. Skipping..."
    fi
done

su -l "$consoleuser" -c "$brew_path upgrade --cask --verbose"

echo "*************Brew check completed*************"

####################


####################

echo "*************Get more info*************"

echo "########TOKEN"
secureTokenStatus=$(sysadminctl -secureTokenStatus itops 2>&1 | awk '{print $7}')
echo "Status: $secureTokenStatus for user itops"

echo "########MDMLINK"
jamfPID="00000000-0000-0000-A000-4A414D460003"
ws1PID="2306fda5-a4ad-484e-b626-36131ced069a"
enrolled=$(/usr/bin/profiles -C)

if echo "$enrolled" | /usr/bin/grep -q "$jamfPID"; then
  echo "JAMF Enrolled"
elif echo "$enrolled" | /usr/bin/grep -q "$ws1PID"; then
  echo "WS1 Enrolled"
else
  echo "NOT Enrolled"
fi

echo "########BIGFIX"
echo "########XDR"

####################
echo "*************TEMP Task*************"
echo "*************SSaver update Nov 2024*************"
# Directory to search
target_dir="/Users/Shared/NYUAD"

# Array of filenames to delete
files=("01.jpg" "02.jpg" "03.jpg" "04.jpg" "05.jpg" "06.jpg" "07.jpg" "08.jpg" "09.jpg")

# Loop through each filename and delete if it exists
for file in "${files[@]}"; do
    file_path="$target_dir/$file"
    if [ -f "$file_path" ]; then
        sudo rm "$file_path"
        echo "Deleted: $file_path"
    else
        echo "File not found: $file_path"
    fi
done

####################

echo "*************End of Script*************"
end_time=$(date +%s)
echo "*************End time: $(date)*************"

elapsed_time=$((end_time - start_time))
echo "*************Elapsed time: $elapsed_time seconds*************"

echo "App Sanity Check Completed"

exit 0
